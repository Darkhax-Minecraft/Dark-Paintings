plugins {
	id 'fabric-loom' version '0.4-SNAPSHOT'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'maven-publish'
}

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/secrets.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/markdown-git-changelog.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/minecraft/artifacts.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/minecraft/maven_local_nomcp.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/patreon.gradle'

import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import com.diluv.schoomp.Webhook
import com.diluv.schoomp.message.Message
import com.diluv.schoomp.message.embed.Embed
import com.diluv.schoomp.message.embed.Footer

if (project.hasProperty('secretFile')) {
    loadSecrets(new File((String) findProperty('secretFile')))
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "${project.mod_name}-fabric-${project.minecraft_version}"
version = project.mod_version

repositories() {
	maven {
		url = "https://maven.fabricmc.net/io/github/prospector/modmenu/"
	}
}

dependencies {

	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "io.github.prospector:modmenu:${modmenu_version}"
}

processResources {

	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

curseforge {

    apiKey = findProperty('curse_auth') ?: 0 
    def versions = "${curse_versions}".split(', ')
    project {

        id = "${curse_project}"
        releaseType = 'beta'
        changelog = getGitChangelog() + "\n\nLike the mod? Consider following me on [Twitter](https://twitter.com/darkhaxdev) and joining the [Discord](https://discord.darkhax.net)\n\nHuge thanks to my supporters on [Patreon](https://www.patreon.com/Darkhax?MCChangelog?${mod_name})\n\n" + getPledgeLog()
        changelogType = 'markdown'

        versions.each {

            addGameVersion "${it}"
        }

        if (project.hasProperty('curse_requirements') || project.hasProperty('curse_optionals')) {

            mainArtifact(jar) {

                relations {

                    if (project.hasProperty('curse_requirements')) {
                        def requirements = "${curse_requirements}".split(', ')
                        requirements.each {

                            requiredLibrary "${it}"
                        }
                    }

                    if (project.hasProperty('curse_optionals')) {
                        def optionals = "${curse_optionals}".split(', ')
                        optionals.each {

                            optionalLibrary "${it}"
                        }
                    }
                }
            }
        }

        addArtifact(sourcesJar)
        addArtifact(javadocJar)
        addArtifact(deobfJar)
    }
}

tasks.getByName("curseforge").doLast {

    try {
    
        // Reads the file ID given to us by CurseForge
        def newFileId = tasks.getByName("curseforge${curse_project}").property('mainArtifact').fileID
    
        def webhook = new Webhook(findProperty('discordCFWebhook'), "${project.findProperty('mod_name')} Gradle Upload");
        
        def message = new Message();        
        message.setUsername(findProperty('mod_name'));
        message.setContent("${project.findProperty('mod_name')} ${version} for Minecraft ${findProperty('minecraft_version')} has been released! The download will be public soon.");
        
        def embed = new Embed();
        embed.addField('Download', "${project.findProperty('curse_page')}/files/$newFileId", false);
        embed.addField('Change Log', "${getGitChangelog() ?: 'Unavailable :('}", false);
        embed.setColor(0xFF8000);           
        message.addEmbed(embed);

        webhook.sendMessage(message);
    }
    
    catch (IOException e) {
        println 'Failed to push to the Discord webhook.'
    }
}